@page "/"
@inject HttpClient Http

<PageTitle>TODOS</PageTitle>

<h1 class="display-4">Todo list</h1>


<section>

    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">

        <div class="my-4">
            <DataAnnotationsValidator />

            <div class="input-group">
                <InputText @bind-Value="model.Content"
                           class="form-control"
                           placeholder="Content" />

                <button type="submit" class="btn btn-outline-secondary">
                    Create
                </button>
            </div>

        </div>
    </EditForm>

</section>

<table class="table mt-8">
    <thead>
        <tr>
            <th>Todo</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todos)
        {
            <tr>
                <td>@todo.Content</td>
                <td>
                    @if (todo.Done)
                    {
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg"
                         width="16"
                         height="16"
                         fill="currentColor" class="bi bi-check2-square" viewBox="0 0 16 16">
                                <path d="M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5H3z" />
                                <path d="m8.354 10.354 7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z" />
                            </svg>
                        </span>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="() => MarkAsDone(todo)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16">
                                <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z" />
                            </svg>
                            Mark as done
                        </button>
                    }
                </td>

                <td>
                    <div class="btn-group" role="group">

                        <button type="button" class="btn btn-outline-secondary">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                            </svg>

                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => Delete(todo.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                            </svg>

                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Todo> todos = new List<Todo>();
    private CreateTodo model = new CreateTodo();

    protected override async Task OnInitializedAsync()
    {
        todos = await Http.GetFromJsonAsync<List<Todo>>("todos");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("todos", model);
        response.EnsureSuccessStatusCode();
        var created = await response.Content.ReadFromJsonAsync<Todo>();
        todos.Add(created);
    }

    private async Task MarkAsDone(Todo todo)
    {
        var response = await Http.PostAsJsonAsync($"todos/{todo.Id}/complete", model);
        response.EnsureSuccessStatusCode();
        todo.Done = true;
    }

    private async Task Delete(int todoId)
    {
        var response = await Http.DeleteAsync($"todos/{todoId}");
        response.EnsureSuccessStatusCode();
        todos.RemoveAll(x => x.Id == todoId);
    }
}
